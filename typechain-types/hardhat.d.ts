/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Attacker01",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Attacker01__factory>;
    getContractFactory(
      name: "Attacker02",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Attacker02__factory>;
    getContractFactory(
      name: "DelegateProposal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DelegateProposal__factory>;
    getContractFactory(
      name: "AttackerDefaultProposal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AttackerDefaultProposal__factory>;
    getContractFactory(
      name: "AttackerMaliciousProposal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AttackerMaliciousProposal__factory>;
    getContractFactory(
      name: "CallDAO",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CallDAO__factory>;
    getContractFactory(
      name: "ITimelock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITimelock__factory>;
    getContractFactory(
      name: "SafetyCallDAO",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafetyCallDAO__factory>;
    getContractFactory(
      name: "Timelock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Timelock__factory>;

    getContractAt(
      name: "Attacker01",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Attacker01>;
    getContractAt(
      name: "Attacker02",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Attacker02>;
    getContractAt(
      name: "DelegateProposal",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DelegateProposal>;
    getContractAt(
      name: "AttackerDefaultProposal",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AttackerDefaultProposal>;
    getContractAt(
      name: "AttackerMaliciousProposal",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AttackerMaliciousProposal>;
    getContractAt(
      name: "CallDAO",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CallDAO>;
    getContractAt(
      name: "ITimelock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ITimelock>;
    getContractAt(
      name: "SafetyCallDAO",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SafetyCallDAO>;
    getContractAt(
      name: "Timelock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Timelock>;

    deployContract(
      name: "Attacker01",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Attacker01>;
    deployContract(
      name: "Attacker02",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Attacker02>;
    deployContract(
      name: "DelegateProposal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DelegateProposal>;
    deployContract(
      name: "AttackerDefaultProposal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AttackerDefaultProposal>;
    deployContract(
      name: "AttackerMaliciousProposal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AttackerMaliciousProposal>;
    deployContract(
      name: "CallDAO",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CallDAO>;
    deployContract(
      name: "ITimelock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITimelock>;
    deployContract(
      name: "SafetyCallDAO",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafetyCallDAO>;
    deployContract(
      name: "Timelock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Timelock>;

    deployContract(
      name: "Attacker01",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Attacker01>;
    deployContract(
      name: "Attacker02",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Attacker02>;
    deployContract(
      name: "DelegateProposal",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DelegateProposal>;
    deployContract(
      name: "AttackerDefaultProposal",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AttackerDefaultProposal>;
    deployContract(
      name: "AttackerMaliciousProposal",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AttackerMaliciousProposal>;
    deployContract(
      name: "CallDAO",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CallDAO>;
    deployContract(
      name: "ITimelock",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITimelock>;
    deployContract(
      name: "SafetyCallDAO",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafetyCallDAO>;
    deployContract(
      name: "Timelock",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Timelock>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.Contract>;
  }
}
